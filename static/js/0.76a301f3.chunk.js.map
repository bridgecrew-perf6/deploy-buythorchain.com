{"version":3,"sources":["helpers/networkFee.ts","hooks/useBalance.ts","hooks/useNetworkFee.ts","hooks/useTxTracker.ts","../node_modules/query-string/index.js","../node_modules/filter-obj/index.js","hooks/useWindowDimensions.ts","views/RuneCanvas/RuneCanvas.style.ts","views/RuneCanvas/index.ts","views/RuneCanvas/RuneCanvas.tsx","hooks/useAffiliates.ts","views/Swap/PanelView/PanelView.style.ts","views/Swap/PanelView/PanelView.tsx","views/Swap/Swap.style.ts","views/Swap/utils.ts","views/Swap/Swap.tsx","hooks/useApprove.ts","helpers/error.ts","views/Swap/index.ts"],"names":["multiplier","average","fast","fastest","getGasRateByChain","inboundData","chain","chainInboundData","find","data","Number","gas_rate","getGasRateByFeeOption","feeOptionType","useBalance","dispatch","useDispatch","useSelector","state","app","wallet","midgard","reloadBalanceByChain","useCallback","walletActions","reloadAllBalance","getMaxBalance","asset","L1Chain","Amount","fromAssetAmount","gasRate","inboundFee","NetworkFee","getNetworkFeeByAsset","direction","balance","getAssetBalance","amount","maxSpendableAmount","isGasAsset","sub","mul","gt","decimal","useNetworkFee","inputAsset","outputAsset","useApp","useMidgard","pools","useMemo","outboundFee","totalFee","outboundFeeInSendAsset","AssetAmount","totalPriceIn","price","eq","add","totalFeeInUSD","Asset","USD","useTxTracker","addNewTxTracker","updateTxTracker","clearTxTrackers","processSubmittedTx","submitTransaction","type","submitTx","uuid","uuidv4","status","TxTrackerStatus","Submitting","action","refunded","pollTransaction","txTracker","Pending","setTxFailed","Failed","strictUriEncode","require","decodeComponent","splitOnFirst","filterObject","encodeFragmentIdentifier","Symbol","validateArrayFormatSeparator","value","length","TypeError","encode","options","strict","encodeURIComponent","decode","keysSorter","input","Array","isArray","sort","Object","keys","a","b","map","key","removeHash","hashStart","indexOf","slice","extract","queryStart","parseValue","parseNumbers","isNaN","trim","parseBooleans","toLowerCase","parse","query","assign","arrayFormat","arrayFormatSeparator","formatter","result","accumulator","exec","replace","undefined","concat","includes","isEncodedArray","newValue","split","item","test","arrayValue","parserForArrayFormat","ret","create","param","k","reduce","Boolean","exports","stringify","object","shouldFilter","skipNull","skipEmptyString","index","join","keyValueSep","encoderForArrayFormat","objectCopy","filter","x","parseUrl","url","url_","hash","parseFragmentIdentifier","fragmentIdentifier","stringifyUrl","queryFromUrl","parsedQueryFromUrl","queryString","getHash","pick","exclude","exclusionFilter","module","obj","predicate","isArr","i","val","getWindowDimensions","window","width","innerWidth","height","innerHeight","Canvas","styled","canvas","RuneCanvas","props","canvasRef","useRef","canvasCtxRef","React","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","chance","setChance","startAnimation","scaled","setScaled","offSets","arr","j","push","radius","Math","random","position","yLocation","drawLogo","ctx","current","scale","fillStyle","fillRect","beginPath","lineWidth","gradient","createLinearGradient","addColorStop","strokeStyle","arc","PI","stroke","lineTo","moveTo","lineCap","orbit","angle","animate","getContext","setTimeout","requestAnimationFrame","ref","useAffiliates","useLocation","search","refs","JSON","ADDRESS","e","Container","Panel","palette","ContentPanel","div","media","sm","PanelView","selected","meta","children","Helmet","title","content","ToolContainer","WalletSetupLink","SwitchPair","ConfirmButtonContainer","ConfirmModalContent","RecipientAddrWrapper","SwapInfo","ApproveBtn","FancyButton","AnimationContainer","getSwapPair","pair","output","decodeFromURL","setDecimal","getSwapTrackerType","swap","synth","synthType","SynthType","MINT","TxTrackerType","Mint","REDEEM","Redeem","Swap","FromCard","ToCard","StyledSliderWrapper","SwapPage","history","useHistory","allPools","poolLoading","slippageTolerance","affiliates","haltedChains","useMimir","useWallet","isWalletLoading","setIsConnectWalletModalOpen","hoverAnimation","setHoverAnimation","isConnected","hasConnectedWallet","handleClickWalletBtn","filteredAffiliates","affiliate","multichain","validateAddress","Chain","THORChain","address","hasWallet","approveStatus","isApproved","setApproved","isWalletConnected","toString","Success","isAssetApproved","approved","checkApproved","assetApproveStatus","useApprove","isTradingHalted","inTradeInboundData","outTradeInboundData","inTradeMimirStatus","outTradeMimirStatus","halted","walletConnected","hasWalletConnected","inputAssets","detail","poolAssets","assets","pool","RUNE","synthAssets","synthAsset","symbol","outputAssets","IS_SYNTH_ACTIVE","inputAmount","setInputAmount","percent","setPercent","chainRecipient","setChainRecipient","recipient","setRecipient","visibleConfirmModal","setVisibleConfirmModal","visibleApproveModal","setVisibleApproveModal","affiliateFee","isLTC","isBTC","AmountType","ASSET_AMOUNT","AFFILIATE_FEE","totalFeePlusAffiliate","isValidAddress","inputAssetAmount","inboundFeeInInputAsset","outboundFeeInOutputAsset","slip","fee","error","console","log","outputAmount","outputAmountAfterFee","slipPercent","Percent","minReceive","minOutputAmount","inputAssetPriceInUSD","Price","baseAsset","priceAmount","outputAssetPriceInUSD","getWalletAddressByChain","maxInputBalance","inputAssetBalance","handleSelectInputAsset","getSwapRoute","handleSelectOutputAsset","handleSwitchPair","handleChangeInputAmount","assetAmount","toNumber","handleChangePercent","p","newAmount","handleSelectMax","handleConfirm","trackerType","trackId","inAssets","toSignificant","outAssets","txHash","txID","msg","description","Notification","message","duration","handleCancel","handleConfirmApprove","Approve","approveAsset","handleSwap","hasInSufficientFee","handleApprove","isValidSwap","IS_TESTNET","valid","isValid","isValidSlip","isSlipValid","btnLabel","renderConfirmModalContent","name","toUpperCase","truncateAddress","toFixed","tooltip","SLIP_TOOLTIP_LABEL","MIN_RECEIVED_LABEL","toCurrencyFormat","TX_FEE_TOOLTIP_LABEL","renderStartScreen","sizevalue","round","fixedWidth","onClick","onMouseEnter","onMouseLeave","href","renderApproveModal","poolAsset","isRUNE","onChange","onSelect","onMax","usdPrice","withLabel","inputProps","disabled","off","chainAddr","onAddressChange","loading","visible","onOk","onCancel","SwapView","getAffiliates","filteredAddresses","affiliateAddress","setAffiliates","useParams","swapPair","setSwapPair","swapPairData","getPair"],"mappings":"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","file":"static/js/0.76a301f3.chunk.js","sourcesContent":["import { FeeOption } from '@xchainjs/xchain-client'\nimport { Chain } from '@xchainjs/xchain-util'\nimport { InboundAddressesItem } from 'midgard-sdk'\n\nconst multiplier: Record<FeeOption, number> = {\n  average: 0.67,\n  fast: 1,\n  fastest: 1.5,\n}\n\n// Reference issue: https://github.com/thorchain/asgardex-electron/issues/1381\nexport const getGasRateByChain = ({\n  inboundData,\n  chain,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n}): number => {\n  const chainInboundData = inboundData.find((data) => data.chain === chain)\n\n  return Number(chainInboundData?.gas_rate ?? 0)\n}\n\nexport const getGasRateByFeeOption = ({\n  inboundData,\n  chain,\n  feeOptionType,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n  feeOptionType: FeeOption\n}) => {\n  return getGasRateByChain({ inboundData, chain }) * multiplier[feeOptionType]\n}\n","import { useCallback } from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Asset, Amount, getAssetBalance, NetworkFee } from 'multichain-sdk'\n\nimport { SupportedChain } from 'multichain-sdk/clients/types'\n\nimport { RootState } from 'redux/store'\nimport * as walletActions from 'redux/wallet/actions'\n\nimport { getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useBalance = () => {\n  const dispatch = useDispatch()\n  const { feeOptionType } = useSelector((state: RootState) => state.app)\n  const { wallet } = useSelector((state: RootState) => state.wallet)\n  const { inboundData } = useSelector((state: RootState) => state.midgard)\n\n  const reloadBalanceByChain = useCallback(\n    (chain: SupportedChain) => {\n      dispatch(walletActions.getWalletByChain(chain))\n    },\n    [dispatch],\n  )\n\n  const reloadAllBalance = useCallback(() => {\n    dispatch(walletActions.loadAllWallets())\n  }, [dispatch])\n\n  const getMaxBalance = useCallback(\n    (asset: Asset): Amount => {\n      if (!wallet?.[asset.L1Chain as SupportedChain]) {\n        // allow max amount for emulation if wallet is not connected\n        return Amount.fromAssetAmount(0, 8)\n      }\n\n      // calculate inbound fee\n      const gasRate = getGasRateByFeeOption({\n        inboundData,\n        chain: asset.L1Chain,\n        feeOptionType,\n      })\n      const inboundFee = NetworkFee.getNetworkFeeByAsset({\n        asset,\n        gasRate,\n        direction: 'inbound',\n      })\n\n      const balance = getAssetBalance(asset, wallet).amount\n\n      /**\n       * if asset is used for gas, subtract the inbound gas fee from input amount\n       * else allow full amount\n       * Calc: max spendable amount = balance amount - 2 x gas fee(if send asset equals to gas asset)\n       */\n\n      const maxSpendableAmount = asset.isGasAsset()\n        ? balance.sub(inboundFee.mul(1.5).amount)\n        : balance\n\n      if (maxSpendableAmount.gt(0)) {\n        return maxSpendableAmount\n      }\n\n      return Amount.fromAssetAmount(0, asset.decimal)\n    },\n    [wallet, feeOptionType, inboundData],\n  )\n\n  return {\n    getMaxBalance,\n    reloadAllBalance,\n    reloadBalanceByChain,\n    wallet,\n  }\n}\n","import { useMemo } from 'react'\n\nimport { Asset, Amount, AssetAmount, NetworkFee, Pool } from 'multichain-sdk'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\n\nimport { getGasRateByChain, getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useNetworkFee = ({\n  inputAsset,\n  outputAsset,\n}: {\n  inputAsset: Asset\n  outputAsset?: Asset\n}) => {\n  const { feeOptionType } = useApp()\n  const { inboundData, pools } = useMidgard()\n\n  const inboundFee = useMemo(() => {\n    // get inbound gasRate with fee option\n\n    const gasRate = getGasRateByFeeOption({\n      inboundData,\n      chain: inputAsset.L1Chain,\n      feeOptionType,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: inputAsset,\n      gasRate,\n      direction: 'inbound',\n    })\n\n    return networkFee\n  }, [inputAsset, inboundData, feeOptionType])\n\n  const outboundFee = useMemo(() => {\n    if (!outputAsset) return null\n\n    const gasRate = getGasRateByChain({\n      inboundData,\n      chain: outputAsset.L1Chain,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: outputAsset,\n      gasRate,\n      direction: 'outbound',\n    })\n\n    return networkFee\n  }, [outputAsset, inboundData])\n\n  const totalFee = useMemo(() => {\n    if (!outboundFee) return inboundFee\n\n    const outboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        outboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n\n    if (inboundFee.asset.eq(inputAsset)) {\n      return inboundFee.add(outboundFeeInSendAsset)\n    }\n\n    const inboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        inboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n    return inboundFeeInSendAsset.add(outboundFeeInSendAsset)\n  }, [inputAsset, inboundFee, outboundFee, pools])\n\n  const totalFeeInUSD = useMemo(\n    () => totalFee.totalPriceIn(Asset.USD(), pools),\n    [totalFee, pools],\n  )\n\n  return {\n    totalFee,\n    inboundFee,\n    outboundFee,\n    totalFeeInUSD,\n  }\n}\n\nexport const getSumAmountInUSD = (\n  assetAmount1: AssetAmount | null,\n  assetAmount2: AssetAmount | null,\n  pools: Pool[],\n) => {\n  const assetAmount1InUSD = assetAmount1?.totalPriceIn(Asset.USD(), pools)\n  const assetAmount2InUSD = assetAmount2?.totalPriceIn(Asset.USD(), pools)\n\n  if (assetAmount1 === null && assetAmount2InUSD)\n    return assetAmount2InUSD.toCurrencyFormat()\n  if (assetAmount2 === null && assetAmount1InUSD)\n    return assetAmount1InUSD.toCurrencyFormat()\n\n  if (assetAmount1InUSD && assetAmount2InUSD) {\n    const sum = assetAmount1InUSD.raw().plus(assetAmount2InUSD.raw())\n\n    return Amount.fromAssetAmount(sum, 8).toFixed(2)\n  }\n\n  return Amount.fromAssetAmount(0, 8).toFixed()\n}\n","import { useCallback } from 'react'\n\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, SubmitTx, TxTrackerType } from 'redux/midgard/types'\n\n/**\n * 1. send transaction and get txHash\n * 2. poll midgard action API and get \"in\" tx with the same txHash\n * 3. check action status (success, pending)\n * 4. check action type and match with send tx type\n *    (if action type is not \"refund\", action type should be matched to the send type)\n */\n\nexport const useTxTracker = () => {\n  const {\n    addNewTxTracker,\n    updateTxTracker,\n    clearTxTrackers,\n    processSubmittedTx,\n  } = useMidgard()\n\n  // confirm and submit a transaction\n  const submitTransaction = useCallback(\n    ({\n      type,\n      submitTx,\n    }: {\n      type: TxTrackerType\n      submitTx: SubmitTx\n    }): string => {\n      const uuid = uuidv4()\n\n      addNewTxTracker({\n        uuid,\n        type,\n        status: TxTrackerStatus.Submitting,\n        submitTx,\n        action: null,\n        refunded: null,\n      })\n\n      return uuid\n    },\n    [addNewTxTracker],\n  )\n\n  // start polling a transaction\n  const pollTransaction = useCallback(\n    ({\n      uuid,\n      submitTx,\n      type,\n    }: {\n      uuid: string\n      submitTx: SubmitTx\n      type: TxTrackerType\n    }) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Pending,\n          submitTx,\n        },\n      })\n      processSubmittedTx({ submitTx, type })\n    },\n    [updateTxTracker, processSubmittedTx],\n  )\n\n  // start polling a transaction\n  const setTxFailed = useCallback(\n    (uuid: string) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Failed,\n        },\n      })\n    },\n    [updateTxTracker],\n  )\n\n  return {\n    submitTransaction,\n    pollTransaction,\n    clearTxTrackers,\n    setTxFailed,\n  }\n}\n","'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\nconst filterObject = require('filter-obj');\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), ':list='].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), ':list=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSep = options.arrayFormat === 'bracket-separator' ?\n\t\t\t\t'[]=' :\n\t\t\t\t'=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(:list)$/.exec(key);\n\t\t\t\tkey = key.replace(/:list$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tcase 'bracket-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[\\])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null ?\n\t\t\t\t\t[] :\n\t\t\t\t\tvalue.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], arrayValue);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction parse(query, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn ret;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of query.split('&')) {\n\t\tif (param === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tfor (const key of Object.keys(ret)) {\n\t\tconst value = ret[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const k of Object.keys(value)) {\n\t\t\t\tvalue[k] = parseValue(value[k], options);\n\t\t\t}\n\t\t} else {\n\t\t\tret[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ','\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key])) ||\n\t\t(options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const key of Object.keys(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = object[key];\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (url, options) => {\n\toptions = Object.assign({\n\t\tdecode: true\n\t}, options);\n\n\tconst [url_, hash] = splitOnFirst(url, '#');\n\n\treturn Object.assign(\n\t\t{\n\t\t\turl: url_.split('?')[0] || '',\n\t\t\tquery: parse(extract(url), options)\n\t\t},\n\t\toptions && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}\n\t);\n};\n\nexports.stringifyUrl = (object, options) => {\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\t[encodeFragmentIdentifier]: true\n\t}, options);\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = exports.extract(object.url);\n\tconst parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});\n\n\tconst query = Object.assign(parsedQueryFromUrl, object.query);\n\tlet queryString = exports.stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\thash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n};\n\nexports.pick = (input, filter, options) => {\n\toptions = Object.assign({\n\t\tparseFragmentIdentifier: true,\n\t\t[encodeFragmentIdentifier]: false\n\t}, options);\n\n\tconst {url, query, fragmentIdentifier} = exports.parseUrl(input, options);\n\treturn exports.stringifyUrl({\n\t\turl,\n\t\tquery: filterObject(query, filter),\n\t\tfragmentIdentifier\n\t}, options);\n};\n\nexports.exclude = (input, filter, options) => {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn exports.pick(input, exclusionFilter, options);\n};\n","'use strict';\nmodule.exports = function (obj, predicate) {\n\tvar ret = {};\n\tvar keys = Object.keys(obj);\n\tvar isArr = Array.isArray(predicate);\n\n\tfor (var i = 0; i < keys.length; i++) {\n\t\tvar key = keys[i];\n\t\tvar val = obj[key];\n\n\t\tif (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {\n\t\t\tret[key] = val;\n\t\t}\n\t}\n\n\treturn ret;\n};\n","import { useState, useEffect } from 'react'\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window\n  return {\n    width,\n    height,\n  }\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions(),\n  )\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions())\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  return windowDimensions\n}\n","import styled from 'styled-components'\n\nexport const Canvas = styled.canvas`\n  position: relative;\n  pointer-events: none;\n`\n","import RuneCanvas from './RuneCanvas'\n\nexport default RuneCanvas\n","import React, { useRef, useEffect, useCallback, useState, useMemo } from 'react'\n\n// import useWindowDimensions from '../../hooks/useWindowDimensions'\nimport useWindowDimensions from 'hooks/useWindowDimensions'\n\nimport { Canvas } from './RuneCanvas.style'\n\ninterface RuneCanvasProps {\n  startAnimation: boolean\n}\nconst RuneCanvas: React.FC<RuneCanvasProps> = (props: RuneCanvasProps) => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null)\n  const canvasCtxRef = React.useRef<CanvasRenderingContext2D | null>(null)\n  const { height } = useWindowDimensions()\n  const [chance, setChance] = useState(0)\n  const { startAnimation } = props\n  const [scaled, setScaled] = useState(false)\n  interface Sprite {\n    radius: number\n    position: number\n    width: number\n  }\n  const offSets: Sprite[] = useMemo(() => {\n    const arr = []\n    for (let j = 0; j < 40; j++) {\n      arr.push({\n        radius: Math.random() * 150,\n        position: Math.random() * 200,\n        width: Math.random() * 20,\n      })\n    }\n    return arr\n  }, [])\n  const yLocation = 495\n\n  const drawLogo = useCallback(\n    (ctx: CanvasRenderingContext2D) => {\n      // Initialize\n      if (canvasRef.current) {\n        // ctx!.scale(0.5, 0.5)\n        const scale = 0.5\n        if (startAnimation) {\n          ctx.fillStyle = '#14151720'\n        } else {\n          ctx.fillStyle = '#141517'\n        }\n        if (!scaled) {\n          // ctx.scale(0.5, 0.5) if scaling makes it sharper?\n          setScaled(true)\n        }\n        ctx.fillRect(0, 0, 1000 * scale, 1000 * scale)\n        ctx.beginPath()\n        ctx.lineWidth = 35 * scale\n        // const opacity = 0xaa - 10\n        /* eslint-disable prefer-template */\n        const gradient = ctx.createLinearGradient(\n          400 * scale,\n          500 * scale,\n          1000 * scale,\n          500 * scale,\n        )\n        gradient.addColorStop(0, '#53ccf9')\n        gradient.addColorStop(0.5, '#71f6AB')\n        gradient.addColorStop(1.0, 'white')\n        ctx.strokeStyle = gradient // opacity.toString(16)\n        ctx.arc(500 * scale, yLocation * scale, 250 * scale, 0, Math.PI * 2)\n        ctx.stroke()\n        ctx.beginPath()\n        // onst opacity = 0xaa - 10\n        /* eslint-disable prefer-template */\n        ctx.lineTo(450 * scale, (yLocation - 114) * scale)\n        ctx.lineTo(450 * scale, (yLocation + 100) * scale)\n        ctx.moveTo(460 * scale, (yLocation - 98) * scale)\n        ctx.lineTo(550 * scale, (yLocation - 50) * scale)\n        ctx.lineTo(510 * scale, yLocation * scale)\n        ctx.lineTo(550 * scale, (yLocation + 90) * scale)\n        ctx.lineTo(550 * scale, (yLocation + 100) * scale)\n        ctx.stroke()\n\n        // const opacity = 0xaa - 10\n        /* eslint-disable prefer-template */\n        // const gradient2 = ctx.createLinearGradient(\n        //   500 * scale,\n        //   500 * scale,\n        //   1000 * scale,\n        //   500 * scale,\n        // )\n        // gradient2.addColorStop(0, '#c8e6ee')\n        // gradient2.addColorStop(0.5, 'transparent')\n        // gradient2.addColorStop(1.0, 'transparent')\n        ctx.lineCap = 'round'\n\n        // ctx.strokeStyle = gradient\n        // ctx.beginPath()\n        // ctx.lineWidth = scale * 10\n        // ctx.arc(\n        //   500 * scale,\n        //   500 * scale,\n        //   350 * scale,\n        //   (chance * 5) / 75,\n        //   (chance * 5) / 75 + Math.PI / 50,\n        // )\n        // ctx.stroke()\n\n        if (startAnimation) {\n          ctx.lineCap = 'butt'\n          for (let i = 0; i < offSets.length; i++) {\n            if (i % 2 === 0) {\n              orbit(\n                ctx,\n                gradient,\n                scale,\n                -1 * chance + offSets[i].position,\n                (275 + offSets[i].radius) * scale,\n                offSets[i].width,\n              )\n            } else {\n              orbit(\n                ctx,\n                gradient,\n                scale,\n                chance + offSets[i].position,\n                (275 + offSets[i].radius) * scale,\n                offSets[i].width,\n              )\n            }\n          }\n          // orbit(ctx, gradient, scale, -chance + 10, 390 * scale, 10)\n          // orbit(ctx, gradient, scale, chance + 80, 400 * scale, 5)\n          // orbit(ctx, gradient, scale, -chance + 300, 450 * scale, 3)\n\n          // orbit(ctx, gradient, scale, -chance + 80, 390 * scale, 8)\n          // orbit(ctx, gradient, scale, chance + 100, 400 * scale, 9)\n          // orbit(ctx, gradient, scale, -chance + 500, 450 * scale, 8)\n\n          // orbit(ctx, gradient, scale, chance + 11, 300 * scale, 10)\n          // orbit(ctx, gradient, scale, -chance + 87, 420 * scale, 5)\n          // orbit(ctx, gradient, scale, chance + 330, 410 * scale, 3)\n\n          // orbit(ctx, gradient, scale, chance + 20, 360 * scale, 1)\n          // orbit(ctx, gradient, scale, -chance + 160, 340 * scale, 2)\n          // orbit(ctx, gradient, scale, chance + 800, 350 * scale, 3)\n        }\n        ctx.lineCap = 'butt'\n      }\n    },\n    [chance, offSets, startAnimation, setScaled, scaled],\n  )\n\n  const orbit = (\n    ctx: CanvasRenderingContext2D,\n    gradient: CanvasGradient,\n    scale: number,\n    angle: number,\n    radius: number,\n    lineWidth: number,\n  ) => {\n    ctx.lineCap = 'round'\n\n    ctx.strokeStyle = gradient\n    ctx.beginPath()\n    ctx.lineWidth = (scale * lineWidth) / 3\n    ctx.arc(\n      500 * scale,\n      yLocation * scale,\n      radius,\n      angle / 25,\n      angle / 25 + Math.PI / 30,\n    )\n    ctx.stroke()\n  }\n\n  const animate = useCallback(() => {\n    if (canvasRef.current) {\n      canvasCtxRef.current = canvasRef.current.getContext('2d')\n      const ctx = canvasCtxRef.current\n      // const y = height / 2\n\n      drawLogo(ctx as CanvasRenderingContext2D)\n\n      setTimeout(() => {\n        setChance(chance + 1)\n      }, 1000 / 30)\n      /* eslint-disable prefer-template */\n    }\n  }, [chance, drawLogo])\n  useEffect(() => {\n    requestAnimationFrame(animate)\n    // Initialize\n  }, [animate])\n  return height > 700 ? (\n    <Canvas ref={canvasRef} width={500} height={500} />\n  ) : (\n    <Canvas ref={canvasRef} width={500} height={440} />\n  )\n}\n\nexport default RuneCanvas\n","import { useLocation } from 'react-router-dom'\n\nimport { decode } from 'jwt-simple'\nimport queryString from 'query-string'\n\nimport { ADDRESS } from 'multichain-sdk/config'\n\nconst useAffiliates = (): string[] | null => {\n  const query = queryString.parse(useLocation().search)\n  if (query.refs) {\n    try {\n      return JSON.parse(decode(query.refs as string, ADDRESS as string))\n    } catch (e) {\n      return null\n    }\n  }\n  return null\n}\n\nexport default useAffiliates\n","import { transparentize } from 'polished'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nimport { media } from 'helpers/style'\n\nimport { Panel } from '../../../components/Panel'\n\nexport const Container = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n\n  justify-content: center;\n\n  background: ${palette('background', 5)};\n  /* ${({ theme }) => `${transparentize(0.4, theme.palette.background[5])}`}; */\n  width: 90vw;\n  max-width: 500px;\n  margin: auto auto auto auto;\n  //margin-bottom: 2vh;\n  padding-top: 0px;\n  padding-right: auto;\n  padding-left: auto;\n\n  border-radius: 10px;\n  border: none;\n  align-items: center;\n`\n\nexport const ContentPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 96%;\n  align-items: center;\n\n  padding: 16px 8px 16px 8px;\n\n  ${media.sm`\n    padding: 16px 12px 4px 12px;\n  `}\n`\n\nexport const HeaderContent = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n\n  padding: 0 10px;\n`\n\nexport const HeaderMenu = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport const HeaderActions = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport const PoolDetailLink = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  height: 20px;\n  color: ${palette('text', 0)};\n`\n\nexport const MenuIconWrapper = styled.div<{ selected: boolean }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  height: 20px;\n\n  font-weight: ${(props) => (props.selected ? 'bold' : 'normal')};\n\n  svg {\n    color: ${(props) =>\n      props.selected ? palette('primary', 0) : palette('text', 0)};\n  }\n`\n","import React from 'react'\n\n// import { Link } from 'react-router-dom'\n// import { SwapOutlined } from '@ant-design/icons'\n// import { TxManager } from 'components/TxManager'\n\n// import { useGlobalState } from 'redux/hooks'\n\n// import { useMedia } from 'hooks/useMedia'\n\nimport { ContentTitle } from '../../../components'\nimport { Helmet } from '../../../components/Helmet'\n// import { Refresh } from '../../../components/Refresh'\n// import { SettingsOverlay } from '../../../components/SettingsOverlay'\nimport { Asset } from '../../../multichain-sdk'\nimport * as Styled from './PanelView.style'\n\nexport type PanelViewProps = {\n  type: 'swap' | 'pending' | 'savings'\n  meta: string\n  poolAsset: Asset\n  children: React.ReactNode\n}\n\n// const SwapButton = ({ selected }: { selected: boolean }) => (\n//   <CoreButton>\n//     <Tooltip tooltip=\"Swap\" placement=\"top\">\n//       <Styled.MenuIconWrapper selected={selected}>\n//         <SwapOutlined />\n//       </Styled.MenuIconWrapper>\n//     </Tooltip>\n//   </CoreButton>\n// )\n\n// type MenuButtonProps = {\n//   selected: boolean\n//   route: string\n//   children: React.ReactElement\n// }\n\n// const MenuButton: React.FC<MenuButtonProps> = ({\n//   selected,\n//   route,\n//   children,\n// }) => {\n//   if (selected) {\n//     return children\n//   }\n\n//   return <Link to={route}>{children}</Link>\n// }\n\nexport const PanelView = ({\n  // type,\n  meta,\n  // poolAsset,\n  children,\n}: PanelViewProps) => {\n  // const swapRoute = useMemo(() => {\n  //   return getSwapRoute(poolAsset, Asset.RUNE())\n  // }, [poolAsset])\n\n  // const { refreshPage } = useGlobalState()\n  // const isGadgetVisible = useMedia('(min-width: 824px)')\n  // const isRefreshVisible = useMedia('(min-width: 375px)')\n\n  return (\n    <Styled.Container>\n      <Helmet title={meta} content={meta} />\n      <ContentTitle children={undefined} />\n      <Styled.ContentPanel>{children}</Styled.ContentPanel>\n    </Styled.Container>\n  )\n}\n","import { FancyButton, Panel } from 'components'\n// import { transparentize } from 'polished'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nexport const ToolContainer = styled.div`\n  display: box;\n  margin-top: 13px;\n  margin-bottom: 3px;\n  height: 40px;\n`\n\nexport const WalletSetupLink = styled.a`\n  text-transform: lowercase;\n  color: #71f6ab;\n  margin-top: 1.5vw;\n`\n\nexport const SliderWrapper = styled.div`\n  margin: auto;\n  width: 95%;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const SwitchPair = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n\n  svg {\n    width: 24px;\n    height: 24px;\n    color: ${palette('background', 8)};\n    transform: rotate(90deg);\n  }\n`\n\nexport const ConfirmButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding: 0 1%;\n\n  margin-top: 5vh;\n  margin-bottom: 2vh;\n\n  button {\n    flex: 1;\n  }\n`\n\nexport const ConfirmModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n`\n\nexport const RecipientAddrWrapper = styled.div`\n  margin-top: 14px;\n`\n\nexport const SwapInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  width: 100%;\n  padding: 8px;\n  margin-top: 14px;\n\n  border: 1px solid ${palette('gray', 0)};\n  border-radius: 4px;\n`\n\nexport const ApproveBtn = styled(FancyButton)`\n  margin-right: 8px;\n`\nexport const Container = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n\n  justify-content: center;\n\n  background: transparent;\n  width: 90vw;\n  max-width: 500px;\n  margin: auto auto auto auto;\n  //margin-bottom: 2vh;\n  padding-top: 0px;\n  padding-right: auto;\n  padding-left: auto;\n\n  border-radius: 10px;\n  border: none;\n  align-items: center;\n`\nexport const AnimationContainer = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n\n  justify-content: center;\n\n  background: transparent;\n  width: 90vw;\n  max-width: 500px;\n  margin: auto auto auto auto;\n  //margin-bottom: 2vh;\n  padding-top: 0px;\n  padding-right: auto;\n  padding-left: auto;\n\n  border-radius: 10px;\n  border: none;\n  align-items: center;\n  position: fixed;\n  top: 8vh;\n  left: 50%;\n  transform: translateX(-50%);\n`\n","import { Asset, Swap, SynthType } from 'multichain-sdk'\n\nimport { TxTrackerType } from 'redux/midgard/types'\n\nimport { Pair } from './types'\n\nexport const getSwapPair = async (pair: string): Promise<Pair | null> => {\n  if (!pair || pair.split('_').length !== 2) {\n    return null\n  }\n\n  const input = pair.split('_')?.[0]\n  const output = pair.split('_')?.[1]\n\n  if (!input || !output) return null\n\n  const inputAsset = Asset.decodeFromURL(input)\n  const outputAsset = Asset.decodeFromURL(output)\n\n  if (!inputAsset || !outputAsset) return null\n\n  await inputAsset.setDecimal()\n  await outputAsset.setDecimal()\n\n  return {\n    inputAsset,\n    outputAsset,\n  }\n}\n\nexport const getSwapTrackerType = (swap: Swap): TxTrackerType => {\n  if (swap.inputAsset.synth || swap.outputAsset.synth) {\n    if (swap.synthType === SynthType.MINT) {\n      return TxTrackerType.Mint\n    }\n    if (swap.synthType === SynthType.REDEEM) {\n      return TxTrackerType.Redeem\n    }\n  }\n\n  return TxTrackerType.Swap\n}\n","import React, { useEffect, useMemo, useState, useCallback } from 'react'\n\nimport { useHistory, useParams } from 'react-router'\n\n// import { SwapOutlined } from '@ant-design/icons'\nimport { Chain } from '@xchainjs/xchain-util'\nimport {\n  AddressSelectCard,\n  AssetInputCard,\n  Slider,\n  ConfirmModal,\n  Information,\n  Notification,\n  IconButton,\n  FancyButton,\n  RuneButton,\n} from 'components'\nimport {\n  // getInputAssets,\n  Amount,\n  Asset,\n  AssetAmount,\n  getWalletAddressByChain,\n  Swap,\n  Percent,\n  Price,\n  getAssetBalance,\n  SupportedChain,\n  hasWalletConnected,\n  hasConnectedWallet,\n  AmountType,\n} from 'multichain-sdk'\nimport styled from 'styled-components'\nimport { palette } from 'styled-theme'\n\nimport { AFFILIATE_FEE } from 'multichain-sdk/config'\n\nimport RuneCanvas from 'views/RuneCanvas'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, TxTrackerType } from 'redux/midgard/types'\nimport { useWallet } from 'redux/wallet/hooks'\n\nimport useAffiliates from 'hooks/useAffiliates'\nimport { useApprove } from 'hooks/useApprove'\nimport { useBalance } from 'hooks/useBalance'\nimport { useMimir } from 'hooks/useMimir'\nimport { useNetworkFee } from 'hooks/useNetworkFee'\nimport { useTxTracker } from 'hooks/useTxTracker'\n\nimport { multichain } from 'services/multichain'\n\nimport { translateErrorMsg } from 'helpers/error'\nimport { getAffiliates, setAffiliates } from 'helpers/storage'\nimport { truncateAddress } from 'helpers/string'\n\nimport { IS_SYNTH_ACTIVE, IS_TESTNET } from 'settings/config'\nimport { getSwapRoute } from 'settings/constants'\nimport {\n  TX_FEE_TOOLTIP_LABEL,\n  SLIP_TOOLTIP_LABEL,\n  // ESTIMATED_TIME_LABEL,\n  MIN_RECEIVED_LABEL,\n} from 'settings/constants/label'\n\nimport { PanelView } from './PanelView'\nimport * as Styled from './Swap.style'\nimport { Pair } from './types'\nimport { getSwapPair, getSwapTrackerType } from './utils'\n\nconst SwapView = () => {\n  const refs = useAffiliates()\n  useEffect(() => {\n    if (refs && getAffiliates() === null) {\n      const affiliateAddresses: string[] = refs\n      const filteredAddresses = affiliateAddresses.filter((affiliateAddress) =>\n        multichain.validateAddress({\n          chain: Chain.THORChain,\n          address: affiliateAddress,\n        }),\n      )\n      setAffiliates(filteredAddresses)\n    }\n  }, [refs])\n  let { pair } = useParams<{ pair: string }>()\n  const [swapPair, setSwapPair] = useState<Pair>()\n  if (!pair || pair === '') {\n    pair = 'BTC.BTC_THOR.RUNE'\n  }\n  useEffect(() => {\n    const getPair = async () => {\n      const swapPairData = await getSwapPair(pair)\n\n      if (swapPairData) {\n        setSwapPair(swapPairData)\n      }\n    }\n\n    getPair()\n  }, [pair])\n\n  if (swapPair) {\n    const { inputAsset, outputAsset } = swapPair\n    return <SwapPage inputAsset={inputAsset} outputAsset={outputAsset} />\n  }\n\n  return null\n}\nconst FromCard = styled.div`\n  background: ${palette('background', 6)};\n  border-radius: 4px;\n  height: 145px;\n`\n\nconst ToCard = styled.div`\n  background: ${palette('background', 6)};\n  border-radius: 4px;\n  height: 145px;\n`\n\nconst StyledSliderWrapper = styled.div`\n  width: 90%;\n  margin: auto;\n`\n\nconst SwapPage = ({ inputAsset, outputAsset }: Pair) => {\n  const history = useHistory()\n  const { wallet, getMaxBalance } = useBalance()\n  const { pools: allPools, poolLoading, inboundData } = useMidgard()\n  const { slippageTolerance, affiliates } = useApp()\n  const { haltedChains } = useMimir()\n  const { isWalletLoading, setIsConnectWalletModalOpen } = useWallet()\n  const [hoverAnimation, setHoverAnimation] = useState(false)\n  const isConnected = useMemo(() => hasConnectedWallet(wallet), [wallet])\n\n  const handleClickWalletBtn = useCallback(() => {\n    if (!isConnected && !isWalletLoading) {\n      setIsConnectWalletModalOpen(true)\n    }\n  }, [isConnected, isWalletLoading, setIsConnectWalletModalOpen])\n\n  const filteredAffiliates = useMemo(\n    () =>\n      affiliates?.filter((affiliate) =>\n        multichain.validateAddress({\n          chain: Chain.THORChain,\n          address: affiliate,\n        }),\n      ),\n    [affiliates],\n  )\n  const { submitTransaction, pollTransaction, setTxFailed } = useTxTracker()\n  const { isApproved, assetApproveStatus } = useApprove(inputAsset, !!wallet)\n  const isTradingHalted: boolean = useMemo(() => {\n    const inTradeInboundData = inboundData.find(\n      (data) => data.chain === inputAsset.chain,\n    )\n    const outTradeInboundData = inboundData.find(\n      (data) => data.chain === outputAsset.chain,\n    )\n\n    const inTradeMimirStatus =\n      haltedChains[inputAsset.L1Chain as SupportedChain]\n    const outTradeMimirStatus =\n      haltedChains[outputAsset.L1Chain as SupportedChain]\n    return (\n      (inTradeInboundData?.halted ?? false) ||\n      (outTradeInboundData?.halted ?? false) ||\n      inTradeMimirStatus ||\n      outTradeMimirStatus\n    )\n  }, [inboundData, haltedChains, inputAsset, outputAsset])\n\n  const { inboundFee, outboundFee, totalFee } = useNetworkFee({\n    inputAsset,\n    outputAsset,\n  })\n\n  const walletConnected = useMemo(\n    () => hasWalletConnected({ wallet, inputAssets: [inputAsset] }),\n    [wallet, inputAsset],\n  )\n\n  const pools = useMemo(\n    () => allPools.filter((data) => data.detail.status === 'available'),\n    [allPools],\n  )\n  const poolAssets = useMemo(() => {\n    const assets = pools.map((pool) => pool.asset)\n    assets.push(Asset.RUNE())\n\n    return assets\n  }, [pools])\n\n  const synthAssets = useMemo(() => {\n    return pools.map((pool) => {\n      const { asset } = pool\n      const synthAsset = new Asset(asset.chain, asset.symbol, true)\n      synthAsset.synth = true\n\n      return synthAsset\n    })\n  }, [pools])\n\n  const outputAssets = useMemo(() => {\n    if (IS_SYNTH_ACTIVE) {\n      return [...poolAssets, ...synthAssets]\n    }\n    return poolAssets\n  }, [poolAssets, synthAssets])\n\n  // const inputAssets = useMemo(\n  //   () =>\n  //     hasConnectedWallet(wallet)\n  //       ? getInputAssets({ wallet, pools })\n  //       : outputAssets,\n  //   [wallet, pools, outputAssets],\n  // )\n\n  const [inputAmount, setInputAmount] = useState<Amount>(\n    Amount.fromAssetAmount(0, 8),\n  )\n  const [percent, setPercent] = useState(0)\n  const [chainRecipient, setChainRecipient] = useState('')\n  const [recipient, setRecipient] = useState('')\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\n  const [visibleApproveModal, setVisibleApproveModal] = useState(false)\n  const affiliateFee = useMemo(\n    () =>\n      !inputAsset.isLTC() && !inputAsset.isBTC()\n        ? inputAmount.mul(AFFILIATE_FEE)\n        : new Amount(0, AmountType.ASSET_AMOUNT, 4),\n    [inputAmount, inputAsset],\n  )\n  const totalFeePlusAffiliate = useMemo(\n    () =>\n      !inputAsset.isLTC() && !inputAsset.isBTC()\n        ? totalFee\n            .add(new AssetAmount(inputAsset, affiliateFee))\n            .totalPriceIn(Asset.USD(), pools)\n        : totalFee,\n    [affiliateFee, inputAsset, pools, totalFee],\n  )\n  const isValidAddress = useMemo(\n    () =>\n      multichain.validateAddress({\n        chain: outputAsset.L1Chain,\n        address: recipient,\n      }),\n    [outputAsset, recipient],\n  )\n\n  const swap: Swap | null = useMemo(() => {\n    if (poolLoading) return null\n\n    try {\n      const inputAssetAmount = new AssetAmount(inputAsset, inputAmount)\n\n      const inboundFeeInInputAsset = new AssetAmount(\n        inputAsset,\n        Amount.fromAssetAmount(\n          inboundFee.totalPriceIn(inputAsset, pools).price,\n          inputAsset.decimal,\n        ),\n      )\n\n      const outboundFeeInOutputAsset = outboundFee\n        ? new AssetAmount(\n            outputAsset,\n            Amount.fromAssetAmount(\n              outboundFee.totalPriceIn(outputAsset, pools).price,\n              outputAsset.decimal,\n            ),\n          )\n        : new AssetAmount(\n            outputAsset,\n            Amount.fromAssetAmount(0, outputAsset.decimal),\n          )\n\n      return new Swap({\n        inputAsset,\n        outputAsset,\n        pools,\n        amount: inputAssetAmount,\n        slip: slippageTolerance,\n        fee: {\n          inboundFee: inboundFeeInInputAsset,\n          outboundFee: outboundFeeInOutputAsset,\n        },\n      })\n    } catch (error) {\n      console.log(error)\n      return null\n    }\n  }, [\n    inputAsset,\n    outputAsset,\n    pools,\n    inputAmount,\n    slippageTolerance,\n    poolLoading,\n    inboundFee,\n    outboundFee,\n  ])\n\n  const outputAmount: Amount = useMemo(() => {\n    if (swap) {\n      return swap.outputAmountAfterFee.amount\n    }\n\n    return Amount.fromAssetAmount(0, 8)\n  }, [swap])\n\n  const slipPercent: Percent = useMemo(\n    () => (swap ? swap.slip : new Percent(0)),\n    [swap],\n  )\n\n  const minReceive: Amount = useMemo(\n    () => (swap ? swap.minOutputAmount : Amount.fromAssetAmount(0, 8)),\n    [swap],\n  )\n\n  const inputAssetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: inputAsset,\n        pools,\n        priceAmount: inputAmount,\n      }),\n    [inputAsset, inputAmount, pools],\n  )\n\n  const outputAssetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: outputAsset,\n        pools,\n        priceAmount: outputAmount,\n      }),\n    [outputAsset, outputAmount, pools],\n  )\n\n  useEffect(() => {\n    if (wallet) {\n      const address = getWalletAddressByChain(wallet, outputAsset.L1Chain)\n      setRecipient(address || '')\n      setChainRecipient(address || '')\n    }\n  }, [wallet, outputAsset])\n\n  const maxInputBalance: Amount = useMemo(() => getMaxBalance(inputAsset), [\n    inputAsset,\n    getMaxBalance,\n  ])\n\n  const inputAssetBalance: Amount = useMemo(() => {\n    if (!wallet) {\n      // allow max amount for emulation if wallet is not connected\n      return Amount.fromAssetAmount(10 ** 3, 8)\n    }\n\n    return getAssetBalance(inputAsset, wallet)\n  }, [inputAsset, wallet])\n\n  const handleSelectInputAsset = useCallback(\n    (input: Asset) => {\n      history.push(getSwapRoute(input, outputAsset))\n    },\n    [history, outputAsset],\n  )\n\n  const handleSelectOutputAsset = useCallback(\n    (output: Asset) => {\n      history.push(getSwapRoute(inputAsset, output))\n    },\n    [history, inputAsset],\n  )\n\n  const handleSwitchPair = useCallback(() => {\n    history.push(getSwapRoute(outputAsset, inputAsset))\n  }, [history, inputAsset, outputAsset])\n\n  const handleChangeInputAmount = useCallback(\n    (amount: Amount) => {\n      if (amount.gt(maxInputBalance)) {\n        setInputAmount(maxInputBalance)\n        setPercent(100)\n      } else {\n        setInputAmount(amount)\n        setPercent(amount.div(maxInputBalance).mul(100).assetAmount.toNumber())\n      }\n    },\n    [maxInputBalance],\n  )\n\n  const handleChangePercent = useCallback(\n    (p: number) => {\n      setPercent(p)\n      const newAmount = maxInputBalance.mul(p).div(100)\n      setInputAmount(newAmount)\n    },\n    [maxInputBalance],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    handleChangePercent(100)\n  }, [handleChangePercent])\n\n  const handleConfirm = useCallback(async () => {\n    setVisibleConfirmModal(false)\n\n    if (wallet && swap) {\n      const trackerType = getSwapTrackerType(swap)\n\n      // register to tx tracker\n      const trackId = submitTransaction({\n        type: trackerType,\n        submitTx: {\n          inAssets: [\n            {\n              asset: swap.inputAsset.toString(),\n              amount: swap.inputAmount.toSignificant(6),\n            },\n          ],\n          outAssets: [\n            {\n              asset: swap.outputAsset.toString(),\n              amount: swap.outputAmountAfterFee.toSignificant(6),\n            },\n          ],\n        },\n      })\n\n      try {\n        const txHash = await multichain.swap(\n          swap,\n          recipient,\n          filteredAffiliates,\n        )\n\n        // start polling\n        pollTransaction({\n          type: trackerType,\n          uuid: trackId,\n          submitTx: {\n            inAssets: [\n              {\n                asset: swap.inputAsset.toString(),\n                amount: swap.inputAmount.toSignificant(6),\n              },\n            ],\n            outAssets: [\n              {\n                asset: swap.outputAsset.toString(),\n                amount: swap.outputAmountAfterFee.toSignificant(6),\n              },\n            ],\n            txID: txHash,\n          },\n        })\n      } catch (error: any) {\n        setTxFailed(trackId)\n\n        // handle better error message\n        const description = translateErrorMsg(error?.toString())\n\n        Notification({\n          type: 'error',\n          message: 'Submit Transaction Failed.',\n          description,\n          duration: 20,\n        })\n        console.log(error)\n      }\n    }\n  }, [\n    wallet,\n    swap,\n    recipient,\n    filteredAffiliates,\n    submitTransaction,\n    pollTransaction,\n    setTxFailed,\n  ])\n\n  const handleCancel = useCallback(() => {\n    setVisibleConfirmModal(false)\n  }, [])\n\n  const handleConfirmApprove = useCallback(async () => {\n    setVisibleApproveModal(false)\n\n    if (wallet) {\n      // register to tx tracker\n      const trackId = submitTransaction({\n        type: TxTrackerType.Approve,\n        submitTx: {\n          inAssets: [\n            {\n              asset: inputAsset.toString(),\n              amount: '0', // not needed for approve tx\n            },\n          ],\n        },\n      })\n\n      try {\n        const txHash = await multichain.approveAsset(inputAsset)\n        console.log('approve txhash', txHash)\n        if (txHash) {\n          // start polling\n          pollTransaction({\n            type: TxTrackerType.Swap,\n            uuid: trackId,\n            submitTx: {\n              inAssets: [\n                {\n                  asset: inputAsset.toString(),\n                  amount: '0', // not needed for approve tx\n                },\n              ],\n              txID: txHash,\n            },\n          })\n        }\n      } catch (error) {\n        setTxFailed(trackId)\n        Notification({\n          type: 'open',\n          message: 'Approve Failed.',\n          duration: 20,\n        })\n        console.log(error)\n      }\n    }\n  }, [inputAsset, wallet, setTxFailed, submitTransaction, pollTransaction])\n\n  const handleSwap = useCallback(() => {\n    if (walletConnected && swap) {\n      if (swap.hasInSufficientFee) {\n        Notification({\n          type: 'info',\n          message: 'Swap Insufficient Fee',\n          description: 'Input amount is not enough to cover the fee',\n        })\n        return\n      }\n\n      if (!isValidAddress) {\n        Notification({\n          type: 'error',\n          message: 'Invalid Recipient Address',\n          description: 'Recipient address should be a valid address.',\n        })\n        return\n      }\n\n      setVisibleConfirmModal(true)\n    } else {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n    }\n  }, [isValidAddress, walletConnected, swap])\n\n  const handleApprove = useCallback(() => {\n    if (walletConnected && swap) {\n      setVisibleApproveModal(true)\n    } else {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n    }\n  }, [walletConnected, swap])\n\n  const isValidSwap = useMemo(() => {\n    if (isTradingHalted && !IS_TESTNET) {\n      return {\n        valid: false,\n        msg: 'Swap not available',\n      }\n    }\n\n    return swap?.isValid() ?? { valid: false }\n  }, [swap, isTradingHalted])\n\n  const isValidSlip = useMemo(() => swap?.isSlipValid() ?? true, [swap])\n\n  const btnLabel = useMemo(() => {\n    if (isValidSwap.valid || inputAmount.eq(0)) {\n      if (!isConnected) {\n        return 'Connect Wallet'\n      }\n      if (inputAsset.synth && outputAsset.synth) {\n        return 'Buy RUNE'\n      }\n      if (inputAsset.synth) {\n        return 'Redeem'\n      }\n      if (outputAsset.synth) {\n        return 'Mint'\n      }\n      return 'Buy RUNE'\n    }\n\n    return isValidSwap?.msg ?? 'Buy RUNE'\n  }, [\n    isValidSwap.valid,\n    isValidSwap?.msg,\n    inputAmount,\n    isConnected,\n    inputAsset.synth,\n    outputAsset.synth,\n  ])\n\n  // const estimatedTime = useMemo(\n  //   () =>\n  //     getEstimatedTxTime({\n  //       chain: inputAsset.L1Chain as SupportedChain,\n  //       amount: inputAmount,\n  //     }),\n  //   [inputAsset, inputAmount],\n  // )\n\n  const renderConfirmModalContent = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title=\"Send\"\n          description={`${inputAmount.toSignificant(\n            6,\n          )} ${inputAsset.name.toUpperCase()}`}\n        />\n        <Information\n          title=\"Recipient\"\n          description={`${outputAmount.toSignificant(\n            6,\n          )} ${outputAsset.name.toUpperCase()}`}\n        />\n        <br />\n        <Information\n          title=\"Recipient Address\"\n          description={truncateAddress(recipient)}\n          error={!isValidAddress}\n        />\n        <br />\n        <Information\n          title=\"Slip\"\n          description={slipPercent.toFixed(3)}\n          error={!isValidSlip}\n          tooltip={SLIP_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Min Received\"\n          description={`${minReceive.toSignificant(\n            6,\n          )} ${outputAsset.name.toUpperCase()}`}\n          tooltip={MIN_RECEIVED_LABEL}\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Affiliate Fee\"\n          description={`${\n            affiliateFee.toSignificant(4) ?? ''\n          } ${inputAsset.name.toUpperCase()}`}\n          tooltip={\n            inputAsset.isBTC() || inputAsset.isLTC()\n              ? 'There is currenly no affiliate fee for BTC or LTC transactions.'\n              : `Transaction fee of ${(AFFILIATE_FEE * 100).toFixed(\n                  0,\n                )}% used to pay affiliates and fund BuyThorchain.com development.`\n          }\n        />\n        <Information\n          title=\"Network Fee\"\n          description={outboundFee?.toCurrencyFormat() ?? ''}\n          tooltip=\"Thorchain network fee used to pay outbound transaction\"\n        />\n        <Information\n          title=\"Total\"\n          description={totalFeePlusAffiliate.toCurrencyFormat(2) ?? ''}\n          tooltip=\"Sum of both transaction fee and network fee\"\n        />\n        {/* <Information\n          title=\"Total Fee\"\n          description={totalFeeInUSD.toCurrencyFormat(4) ?? ''}\n          tooltip=\"Sum of both transaction fee and network fee\"\n        /> */}\n        {/* <Information\n          title=\"Estimated Time\"\n          description={estimatedTime}\n          tooltip={ESTIMATED_TIME_LABEL}\n        /> */}\n      </Styled.ConfirmModalContent>\n    )\n  }, [\n    inputAmount,\n    outputAmount,\n    inputAsset,\n    outputAsset,\n    recipient,\n    slipPercent,\n    isValidSlip,\n    minReceive,\n    inboundFee,\n    outboundFee,\n    // totalFeeInUSD,\n    // estimatedTime,\n    affiliateFee,\n    isValidAddress,\n    totalFeePlusAffiliate,\n  ])\n  const arrowChar = '>'\n  const renderStartScreen = useMemo(() => {\n    return (\n      <Styled.AnimationContainer>\n        <RuneCanvas startAnimation={hoverAnimation} />\n        <RuneButton\n          sizevalue=\"big\"\n          round\n          fixedWidth={false}\n          onClick={handleClickWalletBtn}\n          onMouseEnter={() => setHoverAnimation(true)}\n          onMouseLeave={() => setHoverAnimation(false)}\n        >\n          connect a wallet\n        </RuneButton>\n        <Styled.WalletSetupLink href=\"https://www.xdefi.io/\">\n          no wallet? set one up{arrowChar}\n        </Styled.WalletSetupLink>\n      </Styled.AnimationContainer>\n    )\n  }, [handleClickWalletBtn, hoverAnimation])\n\n  const renderApproveModal = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title={`Approve ${inputAsset.name.toUpperCase()}`}\n          description=\"\"\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [inboundFee, inputAsset])\n\n  const title = useMemo(\n    () => `Swap ${inputAsset.name} >> ${outputAsset.name}`,\n    [inputAsset, outputAsset],\n  )\n  const poolAsset = useMemo(\n    () => (inputAsset.isRUNE() ? outputAsset : inputAsset),\n    [inputAsset, outputAsset],\n  )\n  // const showApp = false\n  return !isConnected ? (\n    renderStartScreen\n  ) : (\n    <>\n      <PanelView meta={title} poolAsset={poolAsset} type=\"swap\">\n        <FromCard>\n          <AssetInputCard\n            title=\"from\"\n            asset={inputAsset}\n            assets={outputAssets}\n            amount={inputAmount}\n            balance={inputAssetBalance}\n            onChange={handleChangeInputAmount}\n            onSelect={handleSelectInputAsset}\n            onMax={handleSelectMax}\n            usdPrice={inputAssetPriceInUSD}\n            wallet={wallet || undefined}\n          />\n          <StyledSliderWrapper>\n            <Slider value={percent} onChange={handleChangePercent} withLabel />\n          </StyledSliderWrapper>\n        </FromCard>\n        <Styled.ToolContainer>\n          <Styled.SwitchPair>\n            <IconButton onClick={handleSwitchPair}>\n              {/* <SwapOutlined /> */}\n            </IconButton>\n          </Styled.SwitchPair>\n        </Styled.ToolContainer>\n        <ToCard>\n          <AssetInputCard\n            title=\"to\"\n            asset={outputAsset}\n            assets={outputAssets}\n            amount={outputAmount}\n            onSelect={handleSelectOutputAsset}\n            inputProps={{ disabled: true }}\n            usdPrice={outputAssetPriceInUSD}\n            wallet={wallet || undefined}\n            off\n          />\n          <Styled.RecipientAddrWrapper>\n            <AddressSelectCard\n              title=\"address\"\n              address={recipient}\n              chain={outputAsset.L1Chain}\n              chainAddr={chainRecipient}\n              onAddressChange={setRecipient}\n            />\n          </Styled.RecipientAddrWrapper>\n        </ToCard>\n        <Styled.SwapInfo>\n          {/* <PriceRate\n          price={swap?.price}\n          inputAsset={swap?.inputAsset}\n          outputAsset={swap?.outputAsset}\n        />\n        <Information\n          title=\"Slip\"\n          description={slipPercent.toFixed(3)}\n          error={!isValidSlip}\n          tooltip={SLIP_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Min Received\"\n          description={`${minReceive.toSignificant(\n            6,\n          )} ${outputAsset.name.toUpperCase()}`}\n          tooltip={MIN_RECEIVED_LABEL}\n        />\n\n        <br />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Network Fee\"\n          description={outboundFee?.toCurrencyFormat() ?? ''}\n          tooltip=\"Estimated network fee used to pay outbound transaction\"\n        /> */}\n          <Information\n            title=\"Total Fee\"\n            description={totalFeePlusAffiliate?.toCurrencyFormat(2) ?? ''}\n            tooltip=\"Sum of both transaction fee and network fee\"\n          />\n        </Styled.SwapInfo>\n        {isApproved !== null && wallet && (\n          <Styled.ConfirmButtonContainer>\n            {!isApproved && (\n              <Styled.ApproveBtn\n                onClick={handleApprove}\n                error={!isValidSwap.valid}\n                disabled={\n                  assetApproveStatus === TxTrackerStatus.Pending ||\n                  assetApproveStatus === TxTrackerStatus.Submitting\n                }\n                loading={\n                  assetApproveStatus === TxTrackerStatus.Pending ||\n                  assetApproveStatus === TxTrackerStatus.Submitting\n                }\n              >\n                Approve\n              </Styled.ApproveBtn>\n            )}\n            {walletConnected ? (\n              <FancyButton\n                disabled={!isApproved}\n                onClick={handleSwap}\n                error={!isValidSwap.valid}\n              >\n                {btnLabel}\n              </FancyButton>\n            ) : (\n              <FancyButton onClick={handleClickWalletBtn}>\n                {btnLabel}\n              </FancyButton>\n            )}\n          </Styled.ConfirmButtonContainer>\n        )}\n        {!wallet && (\n          <Styled.ConfirmButtonContainer>\n            <FancyButton onClick={handleSwap} error={!isValidSwap.valid}>\n              {btnLabel}\n            </FancyButton>\n          </Styled.ConfirmButtonContainer>\n        )}\n        <ConfirmModal\n          visible={visibleConfirmModal}\n          onOk={handleConfirm}\n          onCancel={handleCancel}\n          inputAssets={[inputAsset]}\n        >\n          {renderConfirmModalContent}\n        </ConfirmModal>\n        <ConfirmModal\n          visible={visibleApproveModal}\n          onOk={handleConfirmApprove}\n          onCancel={() => setVisibleApproveModal(false)}\n          inputAssets={[inputAsset]}\n        >\n          {renderApproveModal}\n        </ConfirmModal>\n      </PanelView>\n    </>\n  )\n}\n\nexport default SwapView\n","import { useEffect, useState, useMemo } from 'react'\n\nimport { Asset, hasConnectedWallet } from 'multichain-sdk'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus } from 'redux/midgard/types'\nimport { useWallet } from 'redux/wallet/hooks'\n\nimport { multichain } from 'services/multichain'\n\nexport const useApprove = (asset: Asset, hasWallet = true) => {\n  const { approveStatus } = useMidgard()\n  const { wallet } = useWallet()\n  const [isApproved, setApproved] = useState<boolean | null>(\n    hasWallet ? null : true,\n  )\n\n  const isWalletConnected = useMemo(() => hasConnectedWallet(wallet), [wallet])\n\n  useEffect(() => {\n    if (!hasWallet || !isWalletConnected) {\n      setApproved(true)\n      return\n    }\n\n    const checkApproved = async () => {\n      if (approveStatus?.[asset.toString()] === TxTrackerStatus.Success) {\n        setApproved(true)\n      }\n      const approved = await multichain.isAssetApproved(asset)\n      setApproved(approved)\n    }\n\n    checkApproved()\n  }, [asset, approveStatus, hasWallet, isWalletConnected])\n\n  const assetApproveStatus = useMemo(() => approveStatus?.[asset.toString()], [\n    approveStatus,\n    asset,\n  ])\n\n  return {\n    assetApproveStatus,\n    isApproved,\n  }\n}\n","const ORIGIN_UTXO_ERROR_MSG = 'No utxos to send'\nconst PROCESSED_UTXO_ERROR_MSG =\n  'Please wait a bit until UTXOs are confirmed and Try again.'\n\nexport const translateErrorMsg = (msg: string) => {\n  if (msg.includes(ORIGIN_UTXO_ERROR_MSG)) {\n    return PROCESSED_UTXO_ERROR_MSG\n  }\n\n  return msg\n}\n","import Swap from './Swap'\n\nexport default Swap\n"],"sourceRoot":""}